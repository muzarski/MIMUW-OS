diff -rupNEZbB orig_src/usr/src/include/unistd.h mod_src/usr/src/include/unistd.h
--- orig_src/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/include/unistd.h	2022-05-29 16:22:02.000000000 +0200
@@ -81,6 +81,9 @@
 #define	STDOUT_FILENO	1	/* standard output file descriptor */
 #define	STDERR_FILENO	2	/* standard error file descriptor */
 
+#define BUCKET_Q        8
+#define NR_BUCKETS      10
+
 #include <sys/null.h>
 
 __BEGIN_DECLS
@@ -411,5 +414,7 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int set_bucket(int bucket_nr);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB orig_src/usr/src/lib/libc/misc/Makefile.inc mod_src/usr/src/lib/libc/misc/Makefile.inc
--- orig_src/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/lib/libc/misc/Makefile.inc	2022-05-29 16:30:10.000000000 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c set_bucket.c
diff -rupNEZbB orig_src/usr/src/lib/libc/misc/set_bucket.c mod_src/usr/src/lib/libc/misc/set_bucket.c
--- orig_src/usr/src/lib/libc/misc/set_bucket.c	1970-01-01 01:00:00.000000000 +0100
+++ mod_src/usr/src/lib/libc/misc/set_bucket.c	2022-05-29 16:29:30.000000000 +0200
@@ -0,0 +1,8 @@
+#include <lib.h>
+
+int set_bucket(int bucket_nr) {
+    message m;
+    m.m1_i1 = bucket_nr;
+
+    return _syscall(PM_PROC_NR, PM_SETBUCKET, &m);
+}
\ No newline at end of file
diff -rupNEZbB orig_src/usr/src/minix/include/minix/callnr.h mod_src/usr/src/minix/include/minix/callnr.h
--- orig_src/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/include/minix/callnr.h	2022-05-29 15:18:34.000000000 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_SETBUCKET    (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB orig_src/usr/src/minix/include/minix/com.h mod_src/usr/src/minix/include/minix/com.h
--- orig_src/usr/src/minix/include/minix/com.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/include/minix/com.h	2022-05-29 16:35:30.000000000 +0200
@@ -763,6 +763,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_SET_BUCKET (SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupNEZbB orig_src/usr/src/minix/include/minix/config.h mod_src/usr/src/minix/include/minix/config.h
--- orig_src/usr/src/minix/include/minix/config.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/include/minix/config.h	2022-05-29 17:29:44.000000000 +0200
@@ -69,6 +69,9 @@
 /* default scheduling quanta */
 #define USER_QUANTUM 200
 
+#define BUCKET_Q 8
+#define NR_BUCKETS 10
+
 /* defualt user process cpu */
 #define USER_DEFAULT_CPU	-1 /* use the default cpu or do not change the
 				      current one */
diff -rupNEZbB orig_src/usr/src/minix/include/minix/ipc.h mod_src/usr/src/minix/include/minix/ipc.h
--- orig_src/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/include/minix/ipc.h	2022-05-29 21:49:31.000000000 +0200
@@ -987,9 +987,10 @@ typedef struct {
 	endpoint_t endpoint;
 	int quantum;
 	int priority;
+	int bucket;
 	int cpu;
 
-	uint8_t padding[40];
+	uint8_t padding[36];
 } mess_lsys_krn_schedule;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedule);
 
@@ -1588,6 +1589,14 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_pm_sched_scheduling_set_nice);
 
 typedef struct {
+	endpoint_t endpoint_t;
+	int bucket_nr;
+
+	uint8_t padding[48];
+} mess_pm_sched_scheduling_set_bucket;
+_ASSERT_MSG_SIZE(mess_pm_sched_scheduling_set_bucket);
+
+typedef struct {
 	int status;
 
 	uint8_t padding[52];
@@ -2208,6 +2217,7 @@ typedef struct {
 		mess_pm_lsys_getprocnr	m_pm_lsys_getprocnr;
 		mess_pm_lsys_sigs_signal m_pm_lsys_sigs_signal;
 		mess_pm_sched_scheduling_set_nice m_pm_sched_scheduling_set_nice;
+		mess_pm_sched_scheduling_set_bucket m_pm_sched_scheduling_set_bucket;
 		mess_readclock_lc_rtcdev m_readclock_lc_rtcdev;
 		mess_rs_init		m_rs_init;
 		mess_rs_pm_exec_restart	m_rs_pm_exec_restart;
diff -rupNEZbB orig_src/usr/src/minix/include/minix/syslib.h mod_src/usr/src/minix/include/minix/syslib.h
--- orig_src/usr/src/minix/include/minix/syslib.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/include/minix/syslib.h	2022-05-29 21:53:48.000000000 +0200
@@ -37,7 +37,7 @@ int sys_clear(endpoint_t proc_ep);
 int sys_exit(void);
 int sys_trace(int req, endpoint_t proc_ep, long addr, long *data_p);
 
-int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
+int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int bucket_nr, int
 	cpu);
 int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
 	quantum, int cpu);
diff -rupNEZbB orig_src/usr/src/minix/kernel/cpulocals.h mod_src/usr/src/minix/kernel/cpulocals.h
--- orig_src/usr/src/minix/kernel/cpulocals.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/kernel/cpulocals.h	2022-05-29 19:54:16.000000000 +0200
@@ -71,6 +71,9 @@ DECLARE_CPULOCAL(struct proc *, ptproc);
 /* CPU private run queues */
 DECLARE_CPULOCAL(struct proc *, run_q_head[NR_SCHED_QUEUES]); /* ptrs to ready list headers */
 DECLARE_CPULOCAL(struct proc *, run_q_tail[NR_SCHED_QUEUES]); /* ptrs to ready list tails */
+DECLARE_CPULOCAL(struct proc *, run_q_bucket_head[NR_BUCKETS]);
+DECLARE_CPULOCAL(struct proc *, run_q_bucket_tail[NR_BUCKETS]);
+DECLARE_CPULOCAL(int, current_bucket);
 DECLARE_CPULOCAL(volatile int, cpu_is_idle); /* let the others know that you are idle */
 
 DECLARE_CPULOCAL(volatile int, idle_interrupted); /* to interrupt busy-idle
diff -rupNEZbB orig_src/usr/src/minix/kernel/proc.c mod_src/usr/src/minix/kernel/proc.c
--- orig_src/usr/src/minix/kernel/proc.c	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/kernel/proc.c	2022-05-30 05:20:53.000000000 +0200
@@ -1542,6 +1542,7 @@ void enqueue(
 
   assert(q >= 0);
 
+  if (q != BUCKET_Q) {
   rdy_head = get_cpu_var(rp->p_cpu, run_q_head);
   rdy_tail = get_cpu_var(rp->p_cpu, run_q_tail);
 
@@ -1551,10 +1552,27 @@ void enqueue(
       rp->p_nextready = NULL;		/* mark new end */
   } 
   else {					/* add to tail of queue */
+	    // printf("[KERNEL dequeue] endpoint: %d, prio: %d, bucket: %d", rp->p_endpoint, q, rp->bucket_nr);
       rdy_tail[q]->p_nextready = rp;		/* chain tail of queue */	
       rdy_tail[q] = rp;				/* set new queue tail */
       rp->p_nextready = NULL;		/* mark new end */
   }
+  }
+  else {
+	  rdy_head = get_cpu_var(rp->p_cpu, run_q_bucket_head);
+	  rdy_tail = get_cpu_var(rp->p_cpu, run_q_bucket_tail);
+	  int process_bucket = rp->bucket_nr;
+	  if (!rdy_head[process_bucket]) {
+		rdy_head[process_bucket] = rdy_tail[process_bucket] = rp;
+		rp->p_nextready = NULL;
+	  }
+	  else {
+		rdy_tail[process_bucket]->p_nextready = rp;
+		rdy_tail[process_bucket] = rp;
+		rp->p_nextready = NULL;
+	  }
+  }
+
 
   if (cpuid == rp->p_cpu) {
 	  /*
@@ -1615,7 +1633,7 @@ static void enqueue_head(struct proc *rp
 
   assert(q >= 0);
 
-
+  if (rp->p_priority != BUCKET_Q) {
   rdy_head = get_cpu_var(rp->p_cpu, run_q_head);
   rdy_tail = get_cpu_var(rp->p_cpu, run_q_tail);
 
@@ -1627,6 +1645,22 @@ static void enqueue_head(struct proc *rp
 	rp->p_nextready = rdy_head[q];		/* chain head of queue */
 	rdy_head[q] = rp;			/* set new queue head */
   }
+  }
+  else {
+  	  // printf("[KERNEL enqueue_head] endpoint: %d, prio: %d, bucket: %d", rp->p_endpoint, q, rp->bucket_nr);
+	  int process_bucket = rp->bucket_nr;
+	  rdy_head = get_cpu_var(rp->p_cpu, run_q_bucket_head);
+	  rdy_tail = get_cpu_var(rp->p_cpu, run_q_bucket_tail);
+	  get_cpu_var(rp->p_cpu, current_bucket) = process_bucket;
+	  if(!rdy_head[process_bucket]) {
+		  rdy_head[process_bucket] = rdy_tail[process_bucket] = rp;
+		  rp->p_nextready = NULL;
+	  }
+	  else {
+		  rp->p_nextready = rdy_head[process_bucket];
+		  rdy_head[process_bucket] = rp;
+	  }
+  }
 
   /* Make note of when this process was added to queue */
   read_tsc_64(&(get_cpulocal_var(proc_ptr->p_accounting.enter_queue)));
@@ -1674,6 +1708,7 @@ void dequeue(struct proc *rp)
    * running by being sent a signal that kills it.
    */
   prev_xp = NULL;				
+  if (q != BUCKET_Q) {
   for (xpp = get_cpu_var_ptr(rp->p_cpu, run_q_head[q]); *xpp;
 		  xpp = &(*xpp)->p_nextready) {
       if (*xpp == rp) {				/* found process to remove */
@@ -1686,7 +1721,22 @@ void dequeue(struct proc *rp)
       }
       prev_xp = *xpp;				/* save previous in chain */
   }
-
+  }
+  else {
+	  // printf("[KERNEL dequeue] endpoint: %d, prio: %d, bucket: %d", rp->p_endpoint, q, rp->bucket_nr);
+	  rdy_tail = get_cpu_var(rp->cpu, run_q_bucket_tail);
+	  int process_bucket = rp->bucket_nr;
+	  for (xpp = get_cpu_var_ptr(rp->cpu, run_q_bucket_head[process_bucket]); *xpp; xpp = &(*xpp)->p_nextready) {
+		  if (*xpp == rp) {
+			*xpp = (*xpp)->p_nextready;
+			if (rp == rdy_tail[process_bucket]) {
+				rdy_tail[process_bucket] = prev_xp;
+			}
+			break;  
+		  }
+		  prev_xp = *xpp;
+	  }
+  }
 	
   /* Process accounting for scheduling */
   rp->p_accounting.dequeues++;
@@ -1720,7 +1770,7 @@ static struct proc * pick_proc(void)
  * This function always uses the run queues of the local cpu!
  */
   register struct proc *rp;			/* process to run */
-  struct proc **rdy_head;
+  struct proc **rdy_head, **rdy_head_bucket;
   int q;				/* iterate over queues */
 
   /* Check each of the scheduling queues for ready processes. The number of
@@ -1729,7 +1779,24 @@ static struct proc * pick_proc(void)
    */
   rdy_head = get_cpulocal_var(run_q_head);
   for (q=0; q < NR_SCHED_QUEUES; q++) {	
-	if(!(rp = rdy_head[q])) {
+	if (q == BUCKET_Q) {
+		// printf("[KERNEL pick_proc] endpoint: %d, prio: %d, bucket: %d", rp->p_endpoint, q, rp->bucket_nr);
+		rdy_head_bucket = get_cpulocal_var(run_q_bucket_head);
+		int count = 0;
+		int *cur_bucket = get_cpulocal_var_ptr(current_bucket);
+		while (count < NR_BUCKETS && !rdy_head_bucket[*cur_bucket]) {
+			count++;
+			*cur_bucket = (*cur_bucket + 1) % NR_BUCKETS;
+		}
+
+		if (count == NR_BUCKETS) {
+			continue;
+		}
+
+		rp = rdy_head_bucket[*cur_bucket];
+		*cur_bucket = (*cur_bucket + 1) % NR_BUCKETS;
+	}
+	else if(!(rp = rdy_head[q])) {
 		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
 		continue;
 	}
diff -rupNEZbB orig_src/usr/src/minix/kernel/proc.h mod_src/usr/src/minix/kernel/proc.h
--- orig_src/usr/src/minix/kernel/proc.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/kernel/proc.h	2022-05-29 17:35:17.000000000 +0200
@@ -128,6 +128,8 @@ struct proc {
 
   u64_t p_signal_received;
 
+  int bucket_nr;
+
 #if DEBUG_TRACE
   int p_schedules;
 #endif
diff -rupNEZbB orig_src/usr/src/minix/kernel/proto.h mod_src/usr/src/minix/kernel/proto.h
--- orig_src/usr/src/minix/kernel/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/kernel/proto.h	2022-05-29 18:16:11.000000000 +0200
@@ -99,7 +99,7 @@ void system_init(void);
 void clear_endpoint(struct proc *rc);
 void clear_ipc_refs(struct proc *rc, int caller_ret);
 void kernel_call_resume(struct proc *p);
-int sched_proc(struct proc *rp, int priority, int quantum, int cpu);
+int sched_proc(struct proc *rp, int priority, int quantum, int bucket_nr, int cpu);
 
 /* system/do_vtimer.c */
 void vtimer_check(struct proc *rp);
diff -rupNEZbB orig_src/usr/src/minix/kernel/system/do_schedctl.c mod_src/usr/src/minix/kernel/system/do_schedctl.c
--- orig_src/usr/src/minix/kernel/system/do_schedctl.c	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/kernel/system/do_schedctl.c	2022-05-29 18:15:47.000000000 +0200
@@ -34,7 +34,7 @@ int do_schedctl(struct proc * caller, me
 		cpu = m_ptr->m_lsys_krn_schedctl.cpu;
 
 		/* Try to schedule the process. */
-		if((r = sched_proc(p, priority, quantum, cpu) != OK))
+		if((r = sched_proc(p, priority, quantum, 0, cpu) != OK))
 			return r;
 		p->p_scheduler = NULL;
 	} else {
diff -rupNEZbB orig_src/usr/src/minix/kernel/system/do_schedule.c mod_src/usr/src/minix/kernel/system/do_schedule.c
--- orig_src/usr/src/minix/kernel/system/do_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/kernel/system/do_schedule.c	2022-05-29 18:14:57.000000000 +0200
@@ -9,7 +9,7 @@ int do_schedule(struct proc * caller, me
 {
 	struct proc *p;
 	int proc_nr;
-	int priority, quantum, cpu;
+	int priority, quantum, cpu, bucket;
 
 	if (!isokendpt(m_ptr->m_lsys_krn_schedule.endpoint, &proc_nr))
 		return EINVAL;
@@ -24,6 +24,7 @@ int do_schedule(struct proc * caller, me
 	priority = m_ptr->m_lsys_krn_schedule.priority;
 	quantum = m_ptr->m_lsys_krn_schedule.quantum;
 	cpu = m_ptr->m_lsys_krn_schedule.cpu;
+	bucket = m_ptr->m_lsys_krn_schedule.bucket;
 
-	return sched_proc(p, priority, quantum, cpu);
+	return sched_proc(p, priority, quantum, bucket, cpu);
 }
diff -rupNEZbB orig_src/usr/src/minix/kernel/system.c mod_src/usr/src/minix/kernel/system.c
--- orig_src/usr/src/minix/kernel/system.c	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/kernel/system.c	2022-05-29 21:57:54.000000000 +0200
@@ -621,6 +621,7 @@ void kernel_call_resume(struct proc *cal
 int sched_proc(struct proc *p,
 			int priority,
 			int quantum,
+      int bucket_nr,
 			int cpu)
 {
 	/* Make sure the values given are within the allowed range.*/
@@ -665,6 +666,8 @@ int sched_proc(struct proc *p,
 		p->p_quantum_size_ms = quantum;
 		p->p_cpu_time_left = ms_2_cpu_time(quantum);
 	}
+
+  p->bucket_nr = bucket_nr;
 #ifdef CONFIG_SMP
 	if (cpu != -1)
 		p->p_cpu = cpu;
diff -rupNEZbB orig_src/usr/src/minix/lib/libsys/sys_schedule.c mod_src/usr/src/minix/lib/libsys/sys_schedule.c
--- orig_src/usr/src/minix/lib/libsys/sys_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/lib/libsys/sys_schedule.c	2022-05-29 17:30:25.000000000 +0200
@@ -3,6 +3,7 @@
 int sys_schedule(endpoint_t proc_ep,
 			int priority,
 			int quantum,
+			int bucket,
 			int cpu)
 {
 	message m;
@@ -11,5 +12,7 @@ int sys_schedule(endpoint_t proc_ep,
 	m.m_lsys_krn_schedule.priority = priority;
 	m.m_lsys_krn_schedule.quantum  = quantum;
 	m.m_lsys_krn_schedule.cpu = cpu;
+	m.m_lsys_krn_schedule.bucket = bucket;
+
 	return(_kernel_call(SYS_SCHEDULE, &m));
 }
diff -rupNEZbB orig_src/usr/src/minix/servers/pm/do_setbucket.c mod_src/usr/src/minix/servers/pm/do_setbucket.c
--- orig_src/usr/src/minix/servers/pm/do_setbucket.c	1970-01-01 01:00:00.000000000 +0100
+++ mod_src/usr/src/minix/servers/pm/do_setbucket.c	2022-05-30 01:46:33.000000000 +0200
@@ -0,0 +1,30 @@
+#include "pm.h"
+#include "mproc.h"
+#include <minix/endpoint.h>
+
+int do_setbucket() {
+    int bucket_nr = m_in.m1_i1;
+
+    if (bucket_nr < 0 || bucket_nr >= NR_BUCKETS) {
+        // printf("[PM do_setbucket]: bucket_nr out of range. Returning EINVAL.\n");
+        return EINVAL;
+    }
+
+    if (mp->mp_scheduler == KERNEL) {
+        // printf("[PM do_setbucket]: mp is scheduled by KERNEL. Returning EPERM.\n");
+        return EPERM;
+    }
+
+    int rv;
+    message m;
+
+    m.m_pm_sched_scheduling_set_bucket.bucket_nr = bucket_nr;
+    m.m_pm_sched_scheduling_set_bucket.endpoint_t = mp->mp_endpoint;
+    if ((rv = _taskcall(mp->mp_scheduler, SCHEDULING_SET_BUCKET, &m))) {
+        // printf("[PM do_setbucket]: Error calling taskcall.\n");
+		return rv;
+	}
+
+    // printf("[PM do_setbucket]: Sent taskcall to scheduler. Endpoint: %d, bucket_nr: %d.\n", mp->mp_endpoint, bucket_nr);
+    return 0;
+}
\ No newline at end of file
diff -rupNEZbB orig_src/usr/src/minix/servers/pm/Makefile mod_src/usr/src/minix/servers/pm/Makefile
--- orig_src/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/servers/pm/Makefile	2022-05-29 16:17:42.000000000 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c do_setbucket.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupNEZbB orig_src/usr/src/minix/servers/pm/pm.h mod_src/usr/src/minix/servers/pm/pm.h
--- orig_src/usr/src/minix/servers/pm/pm.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/servers/pm/pm.h	2022-05-29 15:46:17.000000000 +0200
@@ -2,6 +2,8 @@
  * and defines the principal constants.
  */
 #define _SYSTEM		1	/* tell headers that this is the kernel */
+#define BUCKET_Q    8
+#define NR_BUCKETS  10
 
 /* The following are so basic, all the *.c files get them automatically. */
 #include <minix/config.h>	/* MUST be first */
diff -rupNEZbB orig_src/usr/src/minix/servers/pm/proto.h mod_src/usr/src/minix/servers/pm/proto.h
--- orig_src/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/servers/pm/proto.h	2022-05-29 15:22:27.000000000 +0200
@@ -89,3 +89,6 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* do_setbucket.c */
+int do_setbucket(void);
diff -rupNEZbB orig_src/usr/src/minix/servers/pm/schedule.c mod_src/usr/src/minix/servers/pm/schedule.c
--- orig_src/usr/src/minix/servers/pm/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/servers/pm/schedule.c	2022-05-30 03:15:59.000000000 +0200
@@ -98,6 +98,10 @@ int sched_nice(struct mproc *rmp, int ni
 	if (rmp->mp_scheduler == KERNEL || rmp->mp_scheduler == NONE)
 		return (EINVAL);
 
+	// printf("[PM sched_nice] called. Returning ENOSYS...\n");
+
+	return ENOSYS;
+
 	if ((rv = nice_to_priority(nice, &maxprio)) != OK) {
 		return rv;
 	}
diff -rupNEZbB orig_src/usr/src/minix/servers/pm/table.c mod_src/usr/src/minix/servers/pm/table.c
--- orig_src/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/servers/pm/table.c	2022-05-29 15:30:12.000000000 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_SETBUCKET)  = do_setbucket
 };
diff -rupNEZbB orig_src/usr/src/minix/servers/sched/main.c mod_src/usr/src/minix/servers/sched/main.c
--- orig_src/usr/src/minix/servers/sched/main.c	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/servers/sched/main.c	2022-05-30 01:51:00.000000000 +0200
@@ -33,8 +33,6 @@ int main(void)
 
 	if (OK != (s=sys_getmachine(&machine)))
 		panic("couldn't get machine info: %d", s);
-	/* Initialize scheduling timers, used for running balance_queues */
-	init_scheduling();
 
 	/* This is SCHED's main loop - get work and do it, forever and forever. */
 	while (TRUE) {
@@ -70,6 +68,9 @@ int main(void)
 		case SCHEDULING_SET_NICE:
 			result = do_nice(&m_in);
 			break;
+		case SCHEDULING_SET_BUCKET:
+			result = do_setbucket(&m_in);
+			break;
 		case SCHEDULING_NO_QUANTUM:
 			/* This message was sent from the kernel, don't reply */
 			if (IPC_STATUS_FLAGS_TEST(ipc_status,
diff -rupNEZbB orig_src/usr/src/minix/servers/sched/proto.h mod_src/usr/src/minix/servers/sched/proto.h
--- orig_src/usr/src/minix/servers/sched/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/servers/sched/proto.h	2022-05-30 01:52:40.000000000 +0200
@@ -12,7 +12,7 @@ int do_noquantum(message *m_ptr);
 int do_start_scheduling(message *m_ptr);
 int do_stop_scheduling(message *m_ptr);
 int do_nice(message *m_ptr);
-void init_scheduling(void);
+int do_setbucket(message *m_ptr);
 
 /* utility.c */
 int no_sys(int who_e, int call_nr);
diff -rupNEZbB orig_src/usr/src/minix/servers/sched/schedproc.h mod_src/usr/src/minix/servers/sched/schedproc.h
--- orig_src/usr/src/minix/servers/sched/schedproc.h	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/servers/sched/schedproc.h	2022-05-29 17:08:20.000000000 +0200
@@ -33,6 +33,7 @@ EXTERN struct schedproc {
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
+	int bucket_nr;
 } schedproc[NR_PROCS];
 
 /* Flag values */
diff -rupNEZbB orig_src/usr/src/minix/servers/sched/schedule.c mod_src/usr/src/minix/servers/sched/schedule.c
--- orig_src/usr/src/minix/servers/sched/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ mod_src/usr/src/minix/servers/sched/schedule.c	2022-05-30 04:24:26.000000000 +0200
@@ -99,9 +99,7 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
-		rmp->priority += 1; /* lower priority */
-	}
+	rmp->priority = BUCKET_Q;
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
 		return rv;
@@ -163,7 +161,8 @@ int do_start_scheduling(message *m_ptr)
 	/* Populate process slot */
 	rmp->endpoint     = m_ptr->m_lsys_sched_scheduling_start.endpoint;
 	rmp->parent       = m_ptr->m_lsys_sched_scheduling_start.parent;
-	rmp->max_priority = m_ptr->m_lsys_sched_scheduling_start.maxprio;
+	rmp->max_priority = BUCKET_Q;
+	rmp->bucket_nr 	  = 0;
 	if (rmp->max_priority >= NR_SCHED_QUEUES) {
 		return EINVAL;
 	}
@@ -174,7 +173,7 @@ int do_start_scheduling(message *m_ptr)
 	if (rmp->endpoint == rmp->parent) {
 		/* We have a special case here for init, which is the first
 		   process scheduled, and the parent of itself. */
-		rmp->priority   = USER_Q;
+		rmp->priority   = BUCKET_Q;
 		rmp->time_slice = DEFAULT_USER_TIME_SLICE;
 
 		/*
@@ -209,6 +208,7 @@ int do_start_scheduling(message *m_ptr)
 
 		rmp->priority = schedproc[parent_nr_n].priority;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
+		rmp->bucket_nr = schedproc[parent_nr_n].bucket_nr;
 		break;
 		
 	default: 
@@ -295,17 +295,56 @@ int do_nice(message *m_ptr)
 }
 
 /*===========================================================================*
+ *				do_setbucket					     *
+ *===========================================================================*/
+int do_setbucket(message *m_ptr) {
+	struct schedproc *rmp;
+	int rv;
+	int proc_nr_n;
+	unsigned old_bucket, new_bucket;
+
+	if (!accept_message(m_ptr))
+		return EPERM;
+
+	if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_nice.endpoint, &proc_nr_n) != OK) {
+		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+		"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
+		return EBADEPT;
+	}
+
+	rmp = &schedproc[proc_nr_n];
+	new_bucket = m_ptr->m_pm_sched_scheduling_set_bucket.bucket_nr;
+	// printf("[SCHED do_setbucket] Endpoint: %d, bucket_nr: %d.\n", proc_nr_n, new_bucket);
+
+	/* Store old values, in case we need to roll back the changes */
+	old_bucket = rmp->bucket_nr;
+
+	/* Update the proc entry and reschedule the process */
+	rmp->bucket_nr = new_bucket;
+
+	if ((rv = schedule_process_local(rmp)) != OK) {
+		/* Something went wrong when rescheduling the process, roll
+		 * back the changes to proc struct */
+		rmp->bucket_nr = old_bucket;
+	}
+
+	return rv;
+}
+
+/*===========================================================================*
  *				schedule_process			     *
  *===========================================================================*/
 static int schedule_process(struct schedproc * rmp, unsigned flags)
 {
 	int err;
-	int new_prio, new_quantum, new_cpu;
+	int new_prio, new_quantum, new_cpu, new_bucket;
 
 	pick_cpu(rmp);
 
-	if (flags & SCHEDULE_CHANGE_PRIO)
+	if (flags & SCHEDULE_CHANGE_PRIO) {
 		new_prio = rmp->priority;
+		new_bucket = rmp->bucket_nr;
+	}
 	else
 		new_prio = -1;
 
@@ -320,48 +359,11 @@ static int schedule_process(struct sched
 		new_cpu = -1;
 
 	if ((err = sys_schedule(rmp->endpoint, new_prio,
-		new_quantum, new_cpu)) != OK) {
+		new_quantum, new_bucket, new_cpu)) != OK) {
 		printf("PM: An error occurred when trying to schedule %d: %d\n",
 		rmp->endpoint, err);
 	}
 
+	// printf("[SCHED schedule_process] called sys_schedule. endpoint: %d, prio: %d, bucket: %d.\n", rmp->endpoint, new_prio, new_bucket);
 	return err;
 }
-
-
-/*===========================================================================*
- *				start_scheduling			     *
- *===========================================================================*/
-
-void init_scheduling(void)
-{
-	balance_timeout = BALANCE_TIMEOUT * sys_hz();
-	init_timer(&sched_timer);
-	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
-}
-
-/*===========================================================================*
- *				balance_queues				     *
- *===========================================================================*/
-
-/* This function in called every 100 ticks to rebalance the queues. The current
- * scheduler bumps processes down one priority when ever they run out of
- * quantum. This function will find all proccesses that have been bumped down,
- * and pulls them back up. This default policy will soon be changed.
- */
-static void balance_queues(minix_timer_t *tp)
-{
-	struct schedproc *rmp;
-	int proc_nr;
-
-	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
-		if (rmp->flags & IN_USE) {
-			if (rmp->priority > rmp->max_priority) {
-				rmp->priority -= 1; /* increase priority */
-				schedule_process_local(rmp);
-			}
-		}
-	}
-
-	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
-}
