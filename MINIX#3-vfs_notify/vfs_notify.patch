diff -rupNEZbB a/usr/src/minix/include/minix/callnr.h b/usr/src/minix/include/minix/callnr.h
--- a/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/include/minix/callnr.h	2022-06-14 22:03:00.000000000 +0200
@@ -118,7 +118,8 @@
 #define VFS_COPYFD		(VFS_BASE + 46)
 #define VFS_CHECKPERMS		(VFS_BASE + 47)
 #define VFS_GETSYSINFO		(VFS_BASE + 48)
+#define VFS_NOTIFY		(VFS_BASE + 49)
 
-#define NR_VFS_CALLS		49	/* highest number from base plus one */
+#define NR_VFS_CALLS		50	/* highest number from base plus one */
 
 #endif /* !_MINIX_CALLNR_H */
diff -rupNEZbB a/usr/src/minix/include/minix/ipc.h b/usr/src/minix/include/minix/ipc.h
--- a/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/include/minix/ipc.h	2022-06-14 22:03:00.000000000 +0200
@@ -842,6 +842,14 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_lc_vfs_umount);
 
 typedef struct {
+	int fd;
+	int event;
+
+	uint8_t data[48];
+} mess_lc_vfs_notify;
+_ASSERT_MSG_SIZE(mess_lc_vfs_notify);
+
+typedef struct {
 	void		*addr;
 	uint8_t		padding[52];
 } mess_lc_vm_brk;
@@ -2121,6 +2129,7 @@ typedef struct {
 		mess_lc_vfs_truncate	m_lc_vfs_truncate;
 		mess_lc_vfs_umask	m_lc_vfs_umask;
 		mess_lc_vfs_umount	m_lc_vfs_umount;
+		mess_lc_vfs_notify	m_lc_vfs_notify;
 		mess_lc_vm_brk		m_lc_vm_brk;
 		mess_lc_vm_getphys	m_lc_vm_getphys;
 		mess_lc_vm_rusage	m_lc_vm_rusage;
diff -rupNEZbB a/usr/src/minix/servers/vfs/const.h b/usr/src/minix/servers/vfs/const.h
--- a/usr/src/minix/servers/vfs/const.h	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/servers/vfs/const.h	2022-06-15 18:10:36.000000000 +0200
@@ -7,6 +7,7 @@
 #define NR_MNTS           16 	/* # slots in mount table */
 #define NR_VNODES       1024	/* # slots in vnode table */
 #define NR_WTHREADS	   9	/* # slots in worker thread table */
+#define NR_NOTIFY          8	/* # slots in notify table */
 
 #define NR_NONEDEVS	NR_MNTS	/* # slots in nonedev bitmap */
 
@@ -20,7 +21,8 @@
 #define FP_BLOCKED_ON_LOCK	2 /* susp'd on lock */
 #define FP_BLOCKED_ON_POPEN	3 /* susp'd on pipe open */
 #define FP_BLOCKED_ON_SELECT	4 /* susp'd on select */
-#define FP_BLOCKED_ON_OTHER	5 /* blocked on other process, check
+#define FP_BLOCKED_ON_NOTIFY 5
+#define FP_BLOCKED_ON_OTHER	6 /* blocked on other process, check
 				     fp_task to find out */
 
 /* test if the process is blocked on something */
diff -rupNEZbB a/usr/src/minix/servers/vfs/fproc.h b/usr/src/minix/servers/vfs/fproc.h
--- a/usr/src/minix/servers/vfs/fproc.h	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/servers/vfs/fproc.h	2022-06-15 22:41:52.000000000 +0200
@@ -69,4 +69,9 @@ EXTERN struct fproc {
 #define REVIVING           0xDEEAD	/* process is being revived from suspension */
 #define PID_FREE	   0	/* process slot free */
 
+EXTERN struct notify_info {
+  struct fproc *owner;
+  int event;
+} notify_info[NR_NOTIFY];
+
 #endif /* __VFS_FPROC_H__ */
diff -rupNEZbB a/usr/src/minix/servers/vfs/glo.h b/usr/src/minix/servers/vfs/glo.h
--- a/usr/src/minix/servers/vfs/glo.h	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/servers/vfs/glo.h	2022-06-15 15:40:49.000000000 +0200
@@ -17,6 +17,7 @@ EXTERN int reviving;		/* number of pipe
 EXTERN int pending;
 EXTERN int sending;
 EXTERN int verbose;
+EXTERN int notify_in_use;
 
 EXTERN dev_t ROOT_DEV;		/* device number of the root device */
 EXTERN int ROOT_FS_E;           /* kernel endpoint of the root FS proc */
diff -rupNEZbB a/usr/src/minix/servers/vfs/link.c b/usr/src/minix/servers/vfs/link.c
--- a/usr/src/minix/servers/vfs/link.c	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/servers/vfs/link.c	2022-06-15 20:00:45.000000000 +0200
@@ -23,6 +23,7 @@
 #include "path.h"
 #include "vnode.h"
 #include "scratchpad.h"
+#include "fcntl.h"
 
 /*===========================================================================*
  *				do_link					     *
@@ -77,6 +78,10 @@ int do_link(void)
 	r = req_link(vp->v_fs_e, dirp->v_inode_nr, fullpath,
 		     vp->v_inode_nr);
 
+  if (r == OK) {
+    notify_if_needed(dirp, NOTIFY_CREATE);
+  }
+
   unlock_vnode(vp);
   unlock_vnode(dirp);
   if (vmp2 != NULL) unlock_vmnt(vmp2);
@@ -258,6 +263,9 @@ int do_rename(void)
 	upgrade_vmnt_lock(oldvmp); /* Upgrade to exclusive access */
 	r = req_rename(old_dirp->v_fs_e, old_dirp->v_inode_nr, old_name,
 		       new_dirp->v_inode_nr, fullpath);
+      if (r == OK && new_dirp != old_dirp) {
+        notify_if_needed(new_dirp, NOTIFY_MOVE);
+      }
   }
 
   unlock_vnode(old_dirp);
@@ -416,6 +424,10 @@ int do_slink(void)
 	r = req_slink(vp->v_fs_e, vp->v_inode_nr, fullpath, who_e,
 		      vname1, vname1_length - 1, fp->fp_effuid,
 		      fp->fp_effgid);
+
+    if (r == OK) {
+      notify_if_needed(vp, NOTIFY_CREATE);
+    }
   }
 
   unlock_vnode(vp);
diff -rupNEZbB a/usr/src/minix/servers/vfs/Makefile b/usr/src/minix/servers/vfs/Makefile
--- a/usr/src/minix/servers/vfs/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/servers/vfs/Makefile	2022-06-14 22:03:00.000000000 +0200
@@ -7,7 +7,8 @@ SRCS=	main.c open.c read.c write.c pipe.
 	filedes.c stadir.c protect.c time.c \
 	lock.c misc.c utility.c select.c table.c \
 	vnode.c vmnt.c request.c \
-	tll.c comm.c worker.c coredump.c
+	tll.c comm.c worker.c coredump.c \
+	notify.c
 
 .if ${MKCOVERAGE} != "no"
 SRCS+=  gcov.c
diff -rupNEZbB a/usr/src/minix/servers/vfs/notify.c b/usr/src/minix/servers/vfs/notify.c
--- a/usr/src/minix/servers/vfs/notify.c	1970-01-01 01:00:00.000000000 +0100
+++ b/usr/src/minix/servers/vfs/notify.c	2022-06-15 21:38:37.000000000 +0200
@@ -0,0 +1,108 @@
+#include "fs.h"
+#include "fcntl.h"
+#include "scratchpad.h"
+#include "file.h"
+#include "vnode.h"
+
+static struct notify_info* find_free() {
+	struct notify_info *res;
+	for (res = &notify_info[0]; res < &notify_info[NR_NOTIFY]; res++) {
+		if (res->owner == NULL)
+			return res;
+	}
+
+	return NULL;
+}
+
+int do_notify(void) {
+	int fild = job_m_in.m_lc_vfs_notify.fd;
+	int event = job_m_in.m_lc_vfs_notify.event;
+
+	if (event != NOTIFY_OPEN && event != NOTIFY_TRIOPEN && event != NOTIFY_CREATE && event != NOTIFY_MOVE) {
+		return (EINVAL);
+	}
+
+	if (notify_in_use == NR_NOTIFY) {
+		return (ENONOTIFY);
+	}
+
+	struct filp *filp;
+
+	if ((filp = get_filp2(fp, fild, VNODE_READ)) == NULL) {
+		return (err_code);
+	}
+
+	if (event == NOTIFY_TRIOPEN && filp->filp_vno->v_ref_count >= 3) {
+		unlock_filp(filp);
+		return 0;
+	}
+
+	if ((event == NOTIFY_CREATE || event == NOTIFY_MOVE) && !S_ISDIR(filp->filp_vno->v_mode)) {
+		unlock_filp(filp);
+		return ENOTDIR;
+	}
+
+	// zapisz na jakim vnode czekam, i na jakie zdarzenie
+	scratch(fp).file.fd_nr = fild;
+	struct notify_info *slot = find_free();
+	notify_in_use++;
+	slot->owner = fp;
+	slot->event = event;
+
+	unlock_filp(filp);
+	suspend(FP_BLOCKED_ON_NOTIFY);
+	return(SUSPEND);
+}
+
+void notify_if_needed(struct vnode *vp, int op) {
+	struct notify_info *cur;
+	struct fproc *fpr;
+	for (cur = &notify_info[0]; cur < &notify_info[NR_NOTIFY]; cur++) {
+		fpr = cur->owner;
+		if (fpr == NULL || fpr->fp_filp[scratch(fpr).file.fd_nr]->filp_vno != vp || !(cur->event & op))
+			continue;
+		
+		switch(cur->event) {
+			case NOTIFY_OPEN:
+				replycode(fpr->fp_endpoint, 0);
+				notify_in_use--;
+				cur->owner = NULL;
+				break;
+
+			case NOTIFY_TRIOPEN:
+				if (vp->v_ref_count >= 3) {
+					replycode(fpr->fp_endpoint, 0);
+					notify_in_use--;
+					cur->owner = NULL;
+				}
+
+				break;
+
+			case NOTIFY_CREATE:
+				replycode(fpr->fp_endpoint, 0);
+				notify_in_use--;
+				cur->owner = NULL;
+				break;
+
+			case NOTIFY_MOVE:
+				replycode(fpr->fp_endpoint, 0);
+				notify_in_use--;
+				cur->owner = NULL;
+				break;
+				
+			default:
+				break;
+		}
+	}
+}
+
+void free_notify_slot() {
+	struct notify_info *cur;
+	for (cur = &notify_info[0]; cur < &notify_info[NR_NOTIFY]; cur++) {
+		if (fp == cur->owner) {
+			cur->owner = NULL;
+			notify_in_use--;
+			break;
+		}
+	}
+}
diff -rupNEZbB a/usr/src/minix/servers/vfs/open.c b/usr/src/minix/servers/vfs/open.c
--- a/usr/src/minix/servers/vfs/open.c	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/servers/vfs/open.c	2022-06-15 22:27:43.000000000 +0200
@@ -266,6 +266,8 @@ int common_open(char path[PATH_MAX], int
 	}
   }
 
+  if (r == OK)
+  	notify_if_needed(vp, NOTIFY_OPEN | NOTIFY_TRIOPEN);
   unlock_filp(filp);
 
   /* If error, release inode. */
@@ -444,6 +446,7 @@ static struct vnode *new_node(struct loo
 	vp->v_dev = vp->v_vmnt->m_dev;
 	vp->v_fs_count = 1;
 	vp->v_ref_count = 1;
+	notify_if_needed(dirp, NOTIFY_CREATE);
   } else {
 	/* Either last component exists, or there is some other problem. */
 	if (vp != NULL) {
@@ -539,6 +542,9 @@ int do_mknod(void)
   } else if ((r = forbidden(fp, vp, W_BIT|X_BIT)) == OK) {
 	r = req_mknod(vp->v_fs_e, vp->v_inode_nr, fullpath, fp->fp_effuid,
 		      fp->fp_effgid, bits, dev);
+	if (r == OK) {
+		notify_if_needed(vp, NOTIFY_CREATE);
+	}
   }
 
   unlock_vnode(vp);
@@ -578,6 +584,10 @@ int do_mkdir(void)
   } else if ((r = forbidden(fp, vp, W_BIT|X_BIT)) == OK) {
 	r = req_mkdir(vp->v_fs_e, vp->v_inode_nr, fullpath, fp->fp_effuid,
 		      fp->fp_effgid, bits);
+	
+	if (r == OK) {
+		notify_if_needed(vp, NOTIFY_CREATE);
+	}
   }
 
   unlock_vnode(vp);
diff -rupNEZbB a/usr/src/minix/servers/vfs/pipe.c b/usr/src/minix/servers/vfs/pipe.c
--- a/usr/src/minix/servers/vfs/pipe.c	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/servers/vfs/pipe.c	2022-06-15 18:26:07.000000000 +0200
@@ -544,6 +544,10 @@ void unpause(void)
 	case FP_BLOCKED_ON_POPEN:	/* process trying to open a fifo */
 		break;
 
+	case FP_BLOCKED_ON_NOTIFY:
+		free_notify_slot();
+		break;
+
 	case FP_BLOCKED_ON_OTHER:/* process trying to do device I/O (e.g. tty)*/
 		fild = scratch(fp).file.fd_nr;
 		if (fild < 0 || fild >= OPEN_MAX)
diff -rupNEZbB a/usr/src/minix/servers/vfs/proto.h b/usr/src/minix/servers/vfs/proto.h
--- a/usr/src/minix/servers/vfs/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/servers/vfs/proto.h	2022-06-15 18:25:54.000000000 +0200
@@ -348,4 +348,10 @@ void worker_wait(void);
 struct worker_thread *worker_suspend(void);
 void worker_resume(struct worker_thread *org_self);
 void worker_set_proc(struct fproc *rfp);
+
+/* notify.c */
+int do_notify(void);
+void notify_if_needed(struct vnode *vp, int op);
+void free_notify_slot(void);
+
 #endif
diff -rupNEZbB a/usr/src/minix/servers/vfs/table.c b/usr/src/minix/servers/vfs/table.c
--- a/usr/src/minix/servers/vfs/table.c	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/minix/servers/vfs/table.c	2022-06-14 22:03:00.000000000 +0200
@@ -65,4 +65,5 @@ int (* const call_vec[NR_VFS_CALLS])(voi
 	CALL(VFS_COPYFD)	= do_copyfd,		/* copyfd(2) */
 	CALL(VFS_CHECKPERMS)	= do_checkperms,	/* checkperms(2) */
 	CALL(VFS_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(VFS_NOTIFY)	= do_notify,		/* notify() */
 };
diff -rupNEZbB a/usr/src/sys/sys/errno.h b/usr/src/sys/sys/errno.h
--- a/usr/src/sys/sys/errno.h	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/sys/sys/errno.h	2022-06-14 22:03:00.000000000 +0200
@@ -172,7 +172,9 @@
 #define	ENOLINK		(_SIGN 95 )		/* Link has been severed */
 #define	EPROTO		(_SIGN 96 )		/* Protocol error */
 
-#define	ELAST		(_SIGN 96 )		/* Must equal largest errno */
+#define	ENONOTIFY		(_SIGN 97 )		/* No more notifications available */
+
+#define	ELAST		(_SIGN 97 )		/* Must equal largest errno */
 
 #if defined(_KERNEL) || defined(_KMEMUSER)
 /* pseudo-errors returned inside kernel to modify return to process */
diff -rupNEZbB a/usr/src/sys/sys/fcntl.h b/usr/src/sys/sys/fcntl.h
--- a/usr/src/sys/sys/fcntl.h	2014-09-13 23:56:50.000000000 +0200
+++ b/usr/src/sys/sys/fcntl.h	2022-06-14 22:03:00.000000000 +0200
@@ -301,6 +301,14 @@ struct flock {
 #define	AT_REMOVEDIR		0x800	/* Remove directory only */
 #endif
 
+/*
+ * Event flags used by notify()
+ */
+#define	NOTIFY_OPEN	0x00000001	/* file is opened */
+#define	NOTIFY_TRIOPEN	0x00000002	/* file is opened >= 3 times simultaneously */
+#define	NOTIFY_CREATE	0x00000004	/* file is created in the directory */
+#define	NOTIFY_MOVE	0x00000008	/* file is moved to the directory */
+
 
 #ifndef _KERNEL
 #include <sys/cdefs.h>

